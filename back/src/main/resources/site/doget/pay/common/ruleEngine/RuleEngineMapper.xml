<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="site.doget.pay.common.ruleEngine.RuleEngineMapper">
    <select id="getRules" resultType="java.util.Map">
        SELECT * FROM fds_condition
    </select>

<!--    리스트에 담을 거 (bound용)-->
<!--    <select id="checkFDS" resultType="java.util.Map" parameterType="java.util.Map">-->
<!--        select *,TIMESTAMPDIFF(SECOND, b.registered_date, date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s')) as aaa,-->
<!--           (date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s')-process_datetime) as bbb-->
<!--        from account_history a join pay_description b-->
<!--            on a.pay_id = b.pay_id-->
<!--        where #{bound} ${boundFactor} (date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s')-process_datetime)-->
<!--            and b.pay_id = #{payId}-->
<!--            and (process_code = '001' or process_code = '002')-->
<!--            and #{duration} ${durationFactor} TIMESTAMPDIFF(SECOND, b.registered_date, date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s')) ;-->
<!--    </select>-->
<!--   is_same_receiver = 0-->
<!--    <select id="notSameReceiver" resultType="java.util.Map" parameterType="java.util.Map">-->
<!--        select *, count(*) as cnt-->
<!--        from account_history a join pay_description b-->
<!--            on a.pay_id = b.pay_id-->
<!--        where #{bound} ${boundFactor} (date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s')-process_datetime)-->
<!--            and b.pay_id = #{payId}-->
<!--            and (process_code = '001' or process_code = '002')-->
<!--            and #{duration} ${durationFactor} TIMESTAMPDIFF(SECOND, b.registered_date, date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s'));-->
<!--    </select>-->

    <select id="notSameReceiver" resultType="Integer" parameterType="java.util.Map">
        select COALESCE(count(*), 0) as cnt
        from account_history a join pay_description b
                                    on a.pay_id = b.pay_id
        where #{bound} ${boundFactor} (date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s')-process_datetime)
            and b.pay_id = #{payId}
            and (process_code = '001' or process_code = '002')
            and #{duration} ${durationFactor} TIMESTAMPDIFF(SECOND, b.registered_date, date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s'))
            and #{amount} ${amountFactor} process_amount;
    </select>

<!--    <select id="sameReceiver" resultType="java.util.Map" parameterType="java.util.Map">-->
<!--        select *, count(*) as cnt-->
<!--        from account_history a join pay_description b-->
<!--            on a.pay_id = b.pay_id-->
<!--        where #{bound} ${boundFactor} (date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s')-process_datetime)-->
<!--            and b.pay_id = #{payId}-->
<!--            and (process_code = '001' or process_code = '002')-->
<!--            and #{duration} ${durationFactor} TIMESTAMPDIFF(SECOND, b.registered_date, date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s'))-->
<!--        group by opposite_name-->
<!--        having opposite_name = #{oppositeName};-->
<!--    </select>-->

    <select id="sameReceiver" resultType="java.util.Map" parameterType="java.util.Map">
        select ifnull(count(*), 0) as cnt
        from account_history a join pay_description b
                                    on a.pay_id = b.pay_id
        where #{bound} ${boundFactor} (date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s')-process_datetime)
            and b.pay_id = #{payId}
            and (process_code = '001' or process_code = '002')
            and #{duration} ${durationFactor} TIMESTAMPDIFF(SECOND, b.registered_date, date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%s'))
            and #{amount} ${amountFactor} process_amount
            and opposite_name = #{oppositeName}
        group by opposite_name;
    </select>

    <insert id="insertIntoHistory" parameterType="java.util.Map">
        insert into account_history values ('002', date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d%H%i%S'),
                                            #{accountNo}, #{payId}, #{bankCode}, #{paymoneyBalance},
                                            #{reqAmount}, #{oppositeName}, date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d'),
                                            #{payId}, date_format(CONVERT_TZ(sysdate(), 'UTC', 'Asia/Seoul'), '%Y%m%d'), #{payId});
    </insert>

    <delete id="deleteFromHistory" parameterType="java.util.Map">
        delete from account_history
        where pay_id = #{payId}
        order by process_datetime desc
        limit 1;
    </delete>

</mapper>
